#!/bin/sh

set -e

recurse() {
	here=$(sanitize "$1")
	if [ -f "$1"/build.vars ]; then
		vars="$1/build.vars"
	else
		vars="$2/build.vars"
	fi
	[ -f "$vars" ] && ALLDEPS="$ALLDEPS $(sanitize "$vars")"
	var_dir=$(dirname "$vars" | sed 's/[ :]/$&/g')
	if [ -f "$1"/build.after ]; then
		ALLDEPS="$ALLDEPS $(sanitize "$1/build.after")"
		after="|| $(sub_here "$1/build.after")"
	else
		after=$3
	fi
	for extra in "$1"/*.ninja; do
		[ ! -f "$extra" ] && continue
		ALLDEPS="$ALLDEPS $(sanitize "$extra")"
		echo "# $extra"
		sub_here "$extra"
		echo
	done
	for out in "$1"/*.output; do
		[ ! -f "$out" ] && continue
		ALLDEPS="$ALLDEPS $(sanitize "$out")"
		echo "# $out"
		case "${out%.output}" in
		*.a)
			echo "build \$libdir/$(basename "${out%.output}"): library \$"
			;;
		*)
			echo "build \$bindir/$(basename "${out%.output}"): link \$"
			;;
		esac
		while read file; do
			[ ! -f "$dir/$file" ] && \
				echo >&2 "File does not exist: $dir/$file"
			file=$(sanitize "$file")
			echo "    \$builddir/$dir/${file%.[cs]}.o \$"
		done < "$out"
		echo "    $after"
		[ -f "$vars" ] && { sed "s/^/  /" "$vars" | sub_here; echo; }
	done
	for file in "$1"/*.c; do
		[ ! -f "$file" ] && continue
		file=$(sanitize "$file")
		after=
		if [ -f "$file.after" ]; then
			ALLDEPS="$ALLDEPS $file.after"
			after=" | $(sub_here "$file.after")"
		fi
		echo "build \$builddir/${file%.c}.o: cc $file$after"
		[ -f "$vars" ] && { sed "s/^/  /" "$vars" | sub_here; echo; }
	done
	for file in "$1"/*.s; do
		[ ! -f "$file" ] && continue
		file=$(sanitize "$file")
		after=
		if [ -f "$file.after" ]; then
			ALLDEPS="$ALLDEPS $file.after"
			after=" | $(sub_here "$file.after")"
		fi
		echo "build \$builddir/${file%.s}.o: as $file$after"
		[ -f "$vars" ] && { sed "s/^/  /" "$vars" | sub_here; echo; }
	done
	echo
	for dir in "$1"/*/; do
		[ ! -d "$dir" ] && continue
		if [ "$(basename "$dir")" = include ]; then
			headers "${dir%/}"
		else
			recurse "${dir%/}" "$(dirname "$vars")" "$after"
		fi
	done
}

headers() {
	echo "# $1"
	for header in `find "$1" -type f -name '*.h'`; do
		header=$(sanitize "${header#$1/}")
		HEADERDEPS="$HEADERDEPS \$includedir/$header"
		echo "build \$includedir/$header: install $(sanitize "$1")/$header"
		echo "  relpath = $header"
	done
	echo
}

sub_here() {
	sed "s|\$here|$here|g" "$@"
}

sanitize() {
	echo "$@" | sed 's/[ :]/$&/g'
}

exec > build.ninja

cat <<\EOF
# file autogenerated by gen-rules; edit config.ninja or that script instead
include config.ninja

rule gen-rules
  command = ./gen-rules
  generator = true

rule cc
  depfile = $out.d
  command = $cc -MMD -MF $out.d $cflags -o $out -c $in
  description = CC $in

rule as
  command = $as $asflags -o $out $in
  description = AS $in

rule install
  command = install $in $out
  description = INSTALL $relpath

rule library
  command = $ar crs $out $in
  description = AR $out

rule link
  command = $ld $ldflags -o $out $in $libs $global_libs
  description = LINK $out

EOF

ALLDEPS=
HEADERDEPS=

for dir in libc libcodas libyaxfs src drivers initrd; do
	recurse $dir .
done

echo "build headers: phony$HEADERDEPS"
echo "build tags: ctags$ALLDEPS"
echo "build build.ninja: gen-rules | gen-rules$ALLDEPS"
echo "default default"

